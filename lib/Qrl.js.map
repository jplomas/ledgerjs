{"version":3,"sources":["../src/Qrl.js"],"names":["CLA","INS_VERSION","INS_GETSTATE","INS_PUBLIC_KEY","INS_SIGN","INS_SIGN_NEXT","INS_SETIDX","INS_VIEW_ADDRESS","INS_TEST_PK_GEN_1","INS_TEST_PK_GEN_2","INS_TEST_CALC_PK","INS_TEST_WRITE_LEAF","INS_TEST_READ_LEAF","INS_TEST_KEYGEN","INS_TEST_DIGEST","INS_TEST_SETSTATE","INS_TEST_COMM","APDU_ERROR_CODE_OK","QRLTX_TX","QRLTX_TXTOKEN","QRLTX_SLAVE","QRLTX_MESSAGE","P_TX_ADDRESS_SIZE","P_TX_MAX_MESSAGE_SIZE","P_TX_TYPE","P_TX_NUM_DEST","P_TX_SRC_ADDR","P_TX_SRC_FEE","P_TX_DEST","concatenateTypedArrays","resultConstructor","totalLength","arrays","arr","length","result","offset","set","buf2hex","buffer","Array","prototype","map","call","Uint8Array","x","toString","slice","join","bytesToHex","bytes","hex","i","push","errorHandling","response","e","return_code","statusCode","error_message","statusText","Qrl","transport","scrambleKey","decorateAppAPIMethods","send","then","version","apduResponse","idx","idxBuffer","Buffer","alloc","writeUInt8","message","source_address","fee","dest_addresses","dest_amounts","Error","num_dest","tx","copy","messageLength","transaction","_appAPIlock","myqrl","signSend","resultSign","name","from","signature","signNext","signature_chunk","apduR","error_code_data","epk","QRLAddressFromEPKHex","undefined"],"mappings":"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","file":"Qrl.js","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2017-2018 Ledger\n *   (c) 2019 The QRL Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//@flow\n\nimport helpers from '@theqrl/wallet-helpers';\nimport type Transport from \"@ledgerhq/hw-transport\";\n// import {\n//   splitPath,\n//   foreach,\n//   encodeEd25519PublicKey,\n//   verifyEd25519Signature,\n//   checkStellarBip32Path,\n//   hash\n// } from \"./utils\";\n\n/* Constants */\nconst CLA = 0x77;\n\n// Instructions\nconst INS_VERSION = 0x00;\nconst INS_GETSTATE = 0x01;\nconst INS_PUBLIC_KEY = 0x03;\nconst INS_SIGN = 0x04;\nconst INS_SIGN_NEXT = 0x05;\nconst INS_SETIDX = 0x06;\nconst INS_VIEW_ADDRESS = 0x07;\n\n// Test instructions\n/* These instructions are only enabled in test mode */\nconst INS_TEST_PK_GEN_1 = 0x80;\nconst INS_TEST_PK_GEN_2 = 0x81;\nconst INS_TEST_CALC_PK = 0x82;\nconst INS_TEST_WRITE_LEAF = 0x83;\nconst INS_TEST_READ_LEAF = 0x84;\nconst INS_TEST_KEYGEN = 0x85;\nconst INS_TEST_DIGEST = 0x86;\nconst INS_TEST_SETSTATE = 0x87;\nconst INS_TEST_COMM = 0x88;\n\n// APDU ERRORS\nconst APDU_ERROR_CODE_OK = \"9000\";\n\nconst QRLTX_TX = 0;\nconst QRLTX_TXTOKEN = 1;\nconst QRLTX_SLAVE = 2;\nconst QRLTX_MESSAGE = 3;\n\n// Based on https=//github.com/ZondaX/ledger-qrl-app/src/lib/qrl_types.\nconst P_TX_ADDRESS_SIZE = 39;\nconst P_TX_MAX_MESSAGE_SIZE = 80;\n\nconst P_TX_TYPE = 0;\nconst P_TX_NUM_DEST = 1;\nconst P_TX_SRC_ADDR = 2;\nconst P_TX_SRC_FEE = 41;\nconst P_TX_DEST = 49;\n\nfunction concatenateTypedArrays (resultConstructor, ...arrays) {\n    let totalLength = 0;\n    for (let arr of arrays) {\n      totalLength += arr.length;\n    }\n    let result = new resultConstructor(totalLength);\n    let offset = 0;\n    for (let arr of arrays) {\n      result.set(arr, offset);\n      offset += arr.length;\n    }\n    return result;\n}\n\nfunction buf2hex(buffer) { // buffer is an ArrayBuffer\n  return Array.prototype.map.call(new Uint8Array(buffer), x => (\"00\" + x.toString(16)).slice(-2)).join(\"\");\n}\n\nfunction bytesToHex(bytes) {\n  for (var hex = [], i = 0; i < bytes.length; i++) {\n    hex.push((bytes[i] >>> 4).toString(16));\n    hex.push((bytes[i] & 0xf).toString(16));\n  }\n  return hex.join(\"\");\n}\n\nfunction errorHandling(response) {\n  let e = response;\n  // backwards compatibility\n  e.return_code = response.statusCode;\n  e.error_message = response.statusText;\n  return e;\n}\n\n/**\n * Quantum Resistant Ledger API\n *\n * @example\n * import Qrl from \"@ledgerhq/hw-app-qrl\";\n * const str = new Qrl(transport)\n */\nexport default class Qrl {\n  transport: Transport<*>;\n\n  constructor(transport: Transport<*>, scrambleKey: string = \"QRL\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\"get_version\", \"get_state\", \"publickey\",\n      \"viewAddress\", \"setIdx\", \"signSend\", \"signNext\",\n      \"retrieveSignature\", \"createTx\", \"createMessageTx\",\n      \"getAddress\"],\n      scrambleKey\n    );\n  }\n\n  get_version(): Promise<{\n    version: string\n  }> {\n    return this.transport.send(\n      CLA, INS_VERSION, 0x00, 0x00\n      ).then(function (response) {\n      let version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n      return {\n        version: version\n      };\n    },\n    // failed to get version\n    response => errorHandling(response)\n    );\n  }\n\n  get_state(): Promise<{\n    result: object\n  }> {\n    return this.transport.send(\n      CLA, INS_GETSTATE, 0, 0\n        ).then(\n          apduResponse => {\n            var result = {};\n            result[\"state\"] = apduResponse[0]; // 0 - Not ready, 1 - generating keys, 2 = ready\n            result[\"xmss_index\"] = apduResponse[2] + apduResponse[1] * 256;\n            return result;\n           },\n           // failed to get state\n           response => errorHandling(response)\n        );\n  }\n\n  publickey(): Promise<{\n    result: object\n  }> {\n    return this.transport.send(\n      CLA, INS_PUBLIC_KEY).then(\n          apduResponse => {\n              var result = {};\n              result[\"public_key\"] = apduResponse.slice(0, apduResponse.length - 2);\n              return result;\n          },\n          response => errorHandling(response)\n          );\n  }\n\n  viewAddress(): Promise<{\n    result: object\n  }> {\n    return this.transport.send(\n      CLA, INS_VIEW_ADDRESS, 0, 0\n    ).then(\n      apduResponse => {\n        return apduResponse;\n      },\n      response => errorHandling(response)\n    );\n  }\n\n  setIdx(idx: number): Promise<{\n    result: object\n  }> {\n    if (idx < 0 || idx > 255) {\n      let result = {};\n      result[\"return_code\"] = 0x6984;\n      result[\"error_message\"] = \"Data is invalid\";\n      return result;\n    }\n    const idxBuffer = Buffer.alloc(1);\n    idxBuffer.writeUInt8(idx);\n    return this.transport.send(\n      CLA, INS_SETIDX, 0, 0, idxBuffer\n    ).then(\n      apduResponse => {\n        return apduResponse;\n      },\n      response => errorHandling(response)\n    );\n  }\n\n  async signSend(message): Promise<{\n    result: object\n  }> {\n    return this.transport.send(\n      CLA, INS_SIGN, 0, 0, message).then(\n      apduResponse => {\n        return apduResponse;\n      },\n      response => {\n        return errorHandling(response);\n      }\n    );\n  };\n\n  createTx(source_address, fee, dest_addresses, dest_amounts): Promise<{\n    result: object\n  }> {\n      // https://github.com/theqrl/ledger-qrl-app/src/lib/qrl_types.h\n\n      // Verify that sizes are valid\n      if (source_address.length !== P_TX_ADDRESS_SIZE) {\n          throw Error(\"Source address length invalid\");\n      }\n\n      if (fee.length !== 8) {\n          throw Error(\"fee should be 8 bytes\");\n      }\n\n      if (dest_addresses.length !== dest_amounts.length) {\n          throw Error(\"dest addresses and amount should have the same number of items\");\n      }\n\n      if (dest_addresses.length > 3) {\n          throw Error(\"maximum supported number of destinations is 3\");\n      }\n\n      for (let i = 0; i < dest_addresses.length; i++) {\n          if (dest_addresses[i].length !== P_TX_ADDRESS_SIZE) {\n              throw Error(\"Destination address length invalid\");\n          }\n          if (dest_amounts[i].length !== 8) {\n              throw Error(\"each dest_amount should be 8 bytes\");\n          }\n      }\n\n      // Define buffer size\n      var num_dest = dest_addresses.length;\n      let tx = Buffer.alloc(2 + 47 * (1 + num_dest));\n\n      tx[P_TX_TYPE] = QRLTX_TX;\n      tx[P_TX_NUM_DEST] = num_dest;\n\n      source_address.copy(tx, P_TX_SRC_ADDR);\n      fee.copy(tx, P_TX_SRC_FEE);\n\n      let offset = P_TX_DEST;\n      for (let i = 0; i < dest_addresses.length; i++) {\n          dest_addresses[i].copy(tx, offset);\n          offset += P_TX_ADDRESS_SIZE;\n          dest_amounts[i].copy(tx, offset);\n          offset += 8;\n      }\n\n      return tx;\n  };\n\n  createMessageTx(source_address, fee, message): Promise<{\n    result: object\n  }> {\n      // https://github.com/ZondaX/ledger-qrl-app/src/lib/qrl_types.h\n\n      // Verify that sizes are valid\n      if (source_address.length !== P_TX_ADDRESS_SIZE) {\n          throw Error(\"Source address length invalid\");\n      }\n\n      if (fee.length !== 8) {\n          throw Error(\"fee should be 8 bytes\");\n      }\n\n      if (message.length > P_TX_MAX_MESSAGE_SIZE) {\n          throw Error(\"Message length exceed maximum size\");\n      }\n\n      // Define buffer size\n      let messageLength = message.length;\n      let tx = Buffer.alloc(2 + 47 + (messageLength));\n\n      tx[P_TX_TYPE] = QRLTX_MESSAGE;\n      tx[P_TX_NUM_DEST] = messageLength;\n\n      source_address.copy(tx, P_TX_SRC_ADDR);\n      fee.copy(tx, P_TX_SRC_FEE);\n      message.copy(tx, 49);\n\n      return tx;\n  };\n\n  async retrieveSignature(transaction): Promise<{\n    result: object\n  }> {\n      this.transport._appAPIlock = false;\n      let myqrl = this;\n      return this.signSend(transaction).then(async function (resultSign) {\n          // rejected by user\n          if (resultSign.name === \"TransportStatusError\") {\n            // maintain backwards compatibility with error reporting\n            resultSign.return_code = 27014;\n            return resultSign;\n          }\n          let response = {};\n          const apduResponse = Buffer.from(resultSign, \"hex\");\n          response[\"return_code\"] = apduResponse;\n          response[\"error_message\"] = resultSign.error_message;\n          response[\"signature\"] = null;\n\n          if (buf2hex(response.return_code) === APDU_ERROR_CODE_OK) {\n              let signature = new Uint8Array();\n              let result = {};\n              for (let i = 0; i < 11; i++) {\n                  result = await myqrl.signNext();\n                  if (buf2hex(result.return_code) !== APDU_ERROR_CODE_OK) {\n                      response[\"return_code\"] = result.return_code;\n                      response[\"error_message\"] = result.error_message;\n                      break;\n                  }\n\n                  signature = concatenateTypedArrays(\n                      Uint8Array,\n                          signature,\n                          result.signature_chunk\n                  );\n                  response = result;\n              }\n              response[\"return_code\"] = result.return_code;\n              response[\"error_message\"] = result.error_message;\n              response[\"signature\"] = signature;\n          }\n          delete response[\"signature_chunk\"];\n          return response;\n      });\n \n  };\n\n  async signNext(): Promise<{\n    result: object\n  }> {\n      return this.transport.send(\n        CLA, INS_SIGN_NEXT).then(\n        apduResponse => {\n          const apduR = Buffer.from(apduResponse, \"hex\");\n          let error_code_data = apduR.slice(-2);\n          let result = {};\n          result[\"signature_chunk\"] = apduR.slice(0, apduR.length - 2);\n          result[\"return_code\"] = error_code_data;\n          result[\"error_message\"] = 0x77;\n          return result;\n        },\n        response => errorHandling(response)\n      );\n  };\n\n  getAddress(): Promise<{\n    result: object\n  }> {\n    return this.transport.send(\n      CLA, INS_PUBLIC_KEY).then(\n          apduResponse => {\n              var result = {};\n              var epk = apduResponse.slice(0, apduResponse.length - 2);\n              result[\"publicKey\"] = bytesToHex(epk);\n              result[\"address\"] = helpers.QRLAddressFromEPKHex(bytesToHex(epk));\n              result[\"chainCode\"] = undefined;\n              return result;\n          },\n          response => errorHandling(response)\n          );\n  }\n\n  // getAddress(path, verify, askChainCode): Promise<{\n  //   result: object\n  // }> {\n  //   return this.transport.send(\n  //     CLA, INS_PUBLIC_KEY).then(\n  //         apduResponse => {\n  //             var result = {};\n  //             var epk = apduResponse.slice(0, apduResponse.length - 2);\n  //             result.address = helpers.QRLAddressFromEPKHex(epk);\n  //             return result;\n  //         },\n  //         response => errorHandling(response)\n  //         );\n  // };\n\n}\n"]}