{"version":3,"sources":["../src/Qrl.js"],"names":["CLA","INS_VERSION","INS_GETSTATE","INS_PUBLIC_KEY","INS_SIGN","INS_SIGN_NEXT","INS_SETIDX","INS_VIEW_ADDRESS","INS_TEST_PK_GEN_1","INS_TEST_PK_GEN_2","INS_TEST_CALC_PK","INS_TEST_WRITE_LEAF","INS_TEST_READ_LEAF","INS_TEST_KEYGEN","INS_TEST_DIGEST","INS_TEST_SETSTATE","INS_TEST_COMM","APDU_ERROR_CODE_OK","QRLTX_TX","QRLTX_TXTOKEN","QRLTX_SLAVE","QRLTX_MESSAGE","P_TX_ADDRESS_SIZE","P_TX_MAX_MESSAGE_SIZE","P_TX_TYPE","P_TX_NUM_DEST","P_TX_SRC_ADDR","P_TX_SRC_FEE","P_TX_DEST","concatenateTypedArrays","resultConstructor","totalLength","arrays","arr","length","result","offset","set","buf2hex","buffer","Array","prototype","map","call","Uint8Array","x","toString","slice","join","bytesToHex","bytes","hex","i","push","errorHandling","response","e","return_code","statusCode","error_message","statusText","Qrl","transport","scrambleKey","decorateAppAPIMethods","send","then","version","apduResponse","idx","idxBuffer","Buffer","alloc","writeUInt8","message","source_address","fee","dest_addresses","dest_amounts","Error","num_dest","tx","copy","messageLength","transaction","_appAPIlock","myqrl","signSend","resultSign","name","from","signature","signNext","signature_chunk","apduR","error_code_data","epk","helpers","QRLAddressFromEPKHex","undefined"],"mappings":"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","sourcesContent":["/********************************************************************************\n *   Ledger Node JS API\n *   (c) 2017-2018 Ledger\n *   (c) 2019 The QRL Foundation\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n ********************************************************************************/\n//\n\nimport helpers from \"@theqrl/wallet-helpers\";\nimport \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\n\n// import {\n//   splitPath,\n//   foreach,\n//   encodeEd25519PublicKey,\n//   verifyEd25519Signature,\n//   checkStellarBip32Path,\n//   hash\n// } from \"./utils\";\n\n/* Constants */\nconst CLA = 0x77;\n\n// Instructions\nconst INS_VERSION = 0x00;\nconst INS_GETSTATE = 0x01;\nconst INS_PUBLIC_KEY = 0x03;\nconst INS_SIGN = 0x04;\nconst INS_SIGN_NEXT = 0x05;\nconst INS_SETIDX = 0x06;\nconst INS_VIEW_ADDRESS = 0x07;\n\n// Test instructions\n/* These instructions are only enabled in test mode */\nconst INS_TEST_PK_GEN_1 = 0x80;\nconst INS_TEST_PK_GEN_2 = 0x81;\nconst INS_TEST_CALC_PK = 0x82;\nconst INS_TEST_WRITE_LEAF = 0x83;\nconst INS_TEST_READ_LEAF = 0x84;\nconst INS_TEST_KEYGEN = 0x85;\nconst INS_TEST_DIGEST = 0x86;\nconst INS_TEST_SETSTATE = 0x87;\nconst INS_TEST_COMM = 0x88;\n\n// APDU ERRORS\nconst APDU_ERROR_CODE_OK = \"9000\";\n\nconst QRLTX_TX = 0;\nconst QRLTX_TXTOKEN = 1;\nconst QRLTX_SLAVE = 2;\nconst QRLTX_MESSAGE = 3;\n\n// Based on https=//github.com/ZondaX/ledger-qrl-app/src/lib/qrl_types.\nconst P_TX_ADDRESS_SIZE = 39;\nconst P_TX_MAX_MESSAGE_SIZE = 80;\n\nconst P_TX_TYPE = 0;\nconst P_TX_NUM_DEST = 1;\nconst P_TX_SRC_ADDR = 2;\nconst P_TX_SRC_FEE = 41;\nconst P_TX_DEST = 49;\n\nfunction concatenateTypedArrays(resultConstructor, ...arrays) {\n  let totalLength = 0;\n  for (let arr of arrays) {\n    totalLength += arr.length;\n  }\n  let result = new resultConstructor(totalLength);\n  let offset = 0;\n  for (let arr of arrays) {\n    result.set(arr, offset);\n    offset += arr.length;\n  }\n  return result;\n}\n\nfunction buf2hex(buffer) {\n  // buffer is an ArrayBuffer\n  return Array.prototype.map\n    .call(new Uint8Array(buffer), (x) => (\"00\" + x.toString(16)).slice(-2))\n    .join(\"\");\n}\n\nfunction bytesToHex(bytes) {\n  for (var hex = [], i = 0; i < bytes.length; i++) {\n    hex.push((bytes[i] >>> 4).toString(16));\n    hex.push((bytes[i] & 0xf).toString(16));\n  }\n  return hex.join(\"\");\n}\n\nfunction errorHandling(response) {\n  let e = response;\n  // backwards compatibility\n  e.return_code = response.statusCode;\n  e.error_message = response.statusText;\n  return e;\n}\n\n/**\n * Quantum Resistant Ledger API\n *\n * @example\n * import Qrl from \"@ledgerhq/hw-app-qrl\";\n * const str = new Qrl(transport)\n */\nexport default class Qrl {\n  constructor(transport, scrambleKey = \"QRL\") {\n    this.transport = transport;\n    transport.decorateAppAPIMethods(\n      this,\n      [\n        \"get_version\",\n        \"get_state\",\n        \"publickey\",\n        \"viewAddress\",\n        \"setIdx\",\n        \"signSend\",\n        \"signNext\",\n        \"retrieveSignature\",\n        \"createTx\",\n        \"createMessageTx\",\n        \"getAddress\",\n      ],\n      scrambleKey\n    );\n  }\n\n  get_version() {\n    return this.transport.send(CLA, INS_VERSION, 0x00, 0x00).then(\n      function(response) {\n        let version = \"\" + response[1] + \".\" + response[2] + \".\" + response[3];\n        return {\n          version: version,\n        };\n      },\n      // failed to get version\n      (response) => errorHandling(response)\n    );\n  }\n\n  get_state() {\n    return this.transport.send(CLA, INS_GETSTATE, 0, 0).then(\n      (apduResponse) => {\n        var result = {};\n        result[\"state\"] = apduResponse[0]; // 0 - Not ready, 1 - generating keys, 2 = ready\n        result[\"xmss_index\"] = apduResponse[2] + apduResponse[1] * 256;\n        return result;\n      },\n      // failed to get state\n      (response) => errorHandling(response)\n    );\n  }\n\n  publickey() {\n    return this.transport.send(CLA, INS_PUBLIC_KEY).then(\n      (apduResponse) => {\n        var result = {};\n        result[\"public_key\"] = apduResponse.slice(0, apduResponse.length - 2);\n        return result;\n      },\n      (response) => errorHandling(response)\n    );\n  }\n\n  viewAddress() {\n    return this.transport.send(CLA, INS_VIEW_ADDRESS, 0, 0).then(\n      (apduResponse) => {\n        return apduResponse;\n      },\n      (response) => errorHandling(response)\n    );\n  }\n\n  setIdx(idx) {\n    if (idx < 0 || idx > 255) {\n      let result = {};\n      result[\"return_code\"] = 0x6984;\n      result[\"error_message\"] = \"Data is invalid\";\n      return result;\n    }\n    const idxBuffer = Buffer.alloc(1);\n    idxBuffer.writeUInt8(idx);\n    return this.transport.send(CLA, INS_SETIDX, 0, 0, idxBuffer).then(\n      (apduResponse) => {\n        return apduResponse;\n      },\n      (response) => errorHandling(response)\n    );\n  }\n\n  async signSend(message) {\n    return this.transport.send(CLA, INS_SIGN, 0, 0, message).then(\n      (apduResponse) => {\n        return apduResponse;\n      },\n      (response) => {\n        return errorHandling(response);\n      }\n    );\n  }\n\n  createTx(source_address, fee, dest_addresses, dest_amounts) {\n    // https://github.com/theqrl/ledger-qrl-app/src/lib/qrl_types.h\n\n    // Verify that sizes are valid\n    if (source_address.length !== P_TX_ADDRESS_SIZE) {\n      throw Error(\"Source address length invalid\");\n    }\n\n    if (fee.length !== 8) {\n      throw Error(\"fee should be 8 bytes\");\n    }\n\n    if (dest_addresses.length !== dest_amounts.length) {\n      throw Error(\n        \"dest addresses and amount should have the same number of items\"\n      );\n    }\n\n    if (dest_addresses.length > 3) {\n      throw Error(\"maximum supported number of destinations is 3\");\n    }\n\n    for (let i = 0; i < dest_addresses.length; i++) {\n      if (dest_addresses[i].length !== P_TX_ADDRESS_SIZE) {\n        throw Error(\"Destination address length invalid\");\n      }\n      if (dest_amounts[i].length !== 8) {\n        throw Error(\"each dest_amount should be 8 bytes\");\n      }\n    }\n\n    // Define buffer size\n    var num_dest = dest_addresses.length;\n    let tx = Buffer.alloc(2 + 47 * (1 + num_dest));\n\n    tx[P_TX_TYPE] = QRLTX_TX;\n    tx[P_TX_NUM_DEST] = num_dest;\n\n    source_address.copy(tx, P_TX_SRC_ADDR);\n    fee.copy(tx, P_TX_SRC_FEE);\n\n    let offset = P_TX_DEST;\n    for (let i = 0; i < dest_addresses.length; i++) {\n      dest_addresses[i].copy(tx, offset);\n      offset += P_TX_ADDRESS_SIZE;\n      dest_amounts[i].copy(tx, offset);\n      offset += 8;\n    }\n\n    return tx;\n  }\n\n  createMessageTx(source_address, fee, message) {\n    // https://github.com/ZondaX/ledger-qrl-app/src/lib/qrl_types.h\n\n    // Verify that sizes are valid\n    if (source_address.length !== P_TX_ADDRESS_SIZE) {\n      throw Error(\"Source address length invalid\");\n    }\n\n    if (fee.length !== 8) {\n      throw Error(\"fee should be 8 bytes\");\n    }\n\n    if (message.length > P_TX_MAX_MESSAGE_SIZE) {\n      throw Error(\"Message length exceed maximum size\");\n    }\n\n    // Define buffer size\n    let messageLength = message.length;\n    let tx = Buffer.alloc(2 + 47 + messageLength);\n\n    tx[P_TX_TYPE] = QRLTX_MESSAGE;\n    tx[P_TX_NUM_DEST] = messageLength;\n\n    source_address.copy(tx, P_TX_SRC_ADDR);\n    fee.copy(tx, P_TX_SRC_FEE);\n    message.copy(tx, 49);\n\n    return tx;\n  }\n\n  async retrieveSignature(transaction) {\n    this.transport._appAPIlock = false;\n    let myqrl = this;\n    return this.signSend(transaction).then(async function(resultSign) {\n      // rejected by user\n      if (resultSign.name === \"TransportStatusError\") {\n        // maintain backwards compatibility with error reporting\n        resultSign.return_code = 27014;\n        return resultSign;\n      }\n      let response = {};\n      const apduResponse = Buffer.from(resultSign, \"hex\");\n      response[\"return_code\"] = apduResponse;\n      response[\"error_message\"] = resultSign.error_message;\n      response[\"signature\"] = null;\n\n      if (buf2hex(response.return_code) === APDU_ERROR_CODE_OK) {\n        let signature = new Uint8Array();\n        let result = {};\n        for (let i = 0; i < 11; i++) {\n          result = await myqrl.signNext();\n          if (buf2hex(result.return_code) !== APDU_ERROR_CODE_OK) {\n            response[\"return_code\"] = result.return_code;\n            response[\"error_message\"] = result.error_message;\n            break;\n          }\n\n          signature = concatenateTypedArrays(\n            Uint8Array,\n            signature,\n            result.signature_chunk\n          );\n          response = result;\n        }\n        response[\"return_code\"] = result.return_code;\n        response[\"error_message\"] = result.error_message;\n        response[\"signature\"] = signature;\n      }\n      delete response[\"signature_chunk\"];\n      return response;\n    });\n  }\n\n  async signNext() {\n    return this.transport.send(CLA, INS_SIGN_NEXT).then(\n      (apduResponse) => {\n        const apduR = Buffer.from(apduResponse, \"hex\");\n        let error_code_data = apduR.slice(-2);\n        let result = {};\n        result[\"signature_chunk\"] = apduR.slice(0, apduR.length - 2);\n        result[\"return_code\"] = error_code_data;\n        result[\"error_message\"] = 0x77;\n        return result;\n      },\n      (response) => errorHandling(response)\n    );\n  }\n\n  getAddress() {\n    return this.transport.send(CLA, INS_PUBLIC_KEY).then(\n      (apduResponse) => {\n        var result = {};\n        var epk = apduResponse.slice(0, apduResponse.length - 2);\n        result[\"publicKey\"] = bytesToHex(epk);\n        result[\"address\"] = helpers.QRLAddressFromEPKHex(bytesToHex(epk));\n        result[\"chainCode\"] = undefined;\n        return result;\n      },\n      (response) => errorHandling(response)\n    );\n  }\n\n  // getAddress(path, verify, askChainCode): Promise<{\n  //   result: object\n  // }> {\n  //   return this.transport.send(\n  //     CLA, INS_PUBLIC_KEY).then(\n  //         apduResponse => {\n  //             var result = {};\n  //             var epk = apduResponse.slice(0, apduResponse.length - 2);\n  //             result.address = helpers.QRLAddressFromEPKHex(epk);\n  //             return result;\n  //         },\n  //         response => errorHandling(response)\n  //         );\n  // };\n}\n"],"file":"Qrl.js"}